#pragma once
//BG substration
#include <opencv2/core/core.hpp>
#include <opencv2/videoio.hpp>
#include <opencv2/video/background_segm.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>

#include <iostream>
#include <vector>
#include <deque>

#include "Blob.h"
#include "Vehicle.h"
#include "VehicleDetectionConstants.h"
#include "VD_Utility.h"




class VehicleDetection
{
public:
	VehicleDetection();


	void processVideo(char* videoFilename);


private:



	cv::Mat m_frame; //current frame
	cv::Mat m_fgMaskMOG2; //fg mask generated by MOG2 method
	cv::Ptr<cv::BackgroundSubtractor> m_pMOG2; //MOG2 Background subtractor


	int m_keyboard; //input from keyboard

	std::vector<Blob> m_blobs;
	std::deque<Vehicle> m_vehicles;



	double m_ticks = 0;


private:
	void matchCurrentFrameBlobsToExistingBlobs(std::vector<Blob>& existingBlobs, std::vector<Blob>& currentFrameBlobs);
	void addBlobToExistingBlobs(Blob& currentFrameBlob, std::vector<Blob>& existingBlobs, int& intIndex);
	void addNewBlob(Blob& currentFrameBlob, std::vector<Blob>& existingBlobs);

	void addBlobToExistingVehicles(Blob& currentFrameBlob, std::deque<Vehicle>& existingVehicles, size_t& intIndex);
	void addBlobToExistingVehicles(cv::Point& predPosition, cv::Rect predRect, std::deque<Vehicle>& existingVehicles, size_t& intIndex);
	void addNewVehicle(Blob& currentFrameBlob, std::deque<Vehicle>& existingVehicles);
	void matchCurrentFrameBlobsToExistingVehicles(std::deque<Vehicle>& existingVehicles, std::vector<Blob>& currentFrameBlobs, double& dt, cv::Mat& display);

	void kfTraking(cv::Mat& res, Blob& blob, int index, const double& dT);
};

